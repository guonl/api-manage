<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guonl.dao.TApiUrlMapper">
  <resultMap id="BaseResultMap" type="com.guonl.entity.TApiUrl">
    <id column="url_id" jdbcType="INTEGER" property="urlId" />
    <result column="controller_id" jdbcType="INTEGER" property="controllerId" />
    <result column="request_url" jdbcType="VARCHAR" property="requestUrl" />
    <result column="method_name" jdbcType="VARCHAR" property="methodName" />
    <result column="method_type" jdbcType="VARCHAR" property="methodType" />
    <result column="method_content_type" jdbcType="VARCHAR" property="methodContentType" />
    <result column="return_param_class" jdbcType="VARCHAR" property="returnParamClass" />
    <result column="url_status" jdbcType="INTEGER" property="urlStatus" />
    <result column="url_label" jdbcType="VARCHAR" property="urlLabel" />
    <result column="method_desc" jdbcType="VARCHAR" property="methodDesc" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.guonl.entity.TApiUrlWithBLOBs">
    <result column="request_param_map" jdbcType="LONGVARCHAR" property="requestParamMap" />
    <result column="return_param_map" jdbcType="LONGVARCHAR" property="returnParamMap" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    url_id, controller_id, request_url, method_name, method_type, method_content_type, 
    return_param_class, url_status, url_label, method_desc, create_time, update_time, 
    del_flag
  </sql>
  <sql id="Blob_Column_List">
    request_param_map, return_param_map
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.guonl.entity.TApiUrlExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.guonl.entity.TApiUrlExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url
    where url_id = #{urlId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from api_url
    where url_id = #{urlId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guonl.entity.TApiUrlExample">
    delete from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guonl.entity.TApiUrlWithBLOBs">
    insert into api_url (url_id, controller_id, request_url, 
      method_name, method_type, method_content_type, 
      return_param_class, url_status, url_label, 
      method_desc, create_time, update_time, 
      del_flag, request_param_map, return_param_map
      )
    values (#{urlId,jdbcType=INTEGER}, #{controllerId,jdbcType=INTEGER}, #{requestUrl,jdbcType=VARCHAR}, 
      #{methodName,jdbcType=VARCHAR}, #{methodType,jdbcType=VARCHAR}, #{methodContentType,jdbcType=VARCHAR}, 
      #{returnParamClass,jdbcType=VARCHAR}, #{urlStatus,jdbcType=INTEGER}, #{urlLabel,jdbcType=VARCHAR}, 
      #{methodDesc,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{delFlag,jdbcType=BIT}, #{requestParamMap,jdbcType=LONGVARCHAR}, #{returnParamMap,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into api_url
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.urlId != null">
            url_id,
          </if>
          <if test="record.controllerId != null">
            controller_id,
          </if>
          <if test="record.requestUrl != null">
            request_url,
          </if>
          <if test="record.methodName != null">
            method_name,
          </if>
          <if test="record.methodType != null">
            method_type,
          </if>
          <if test="record.methodContentType != null">
            method_content_type,
          </if>
          <if test="record.returnParamClass != null">
            return_param_class,
          </if>
          <if test="record.urlStatus != null">
            url_status,
          </if>
          <if test="record.urlLabel != null">
            url_label,
          </if>
          <if test="record.methodDesc != null">
            method_desc,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.requestParamMap != null">
            request_param_map,
          </if>
          <if test="record.returnParamMap != null">
            return_param_map,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.urlId != null">
            #{record.urlId,jdbcType=INTEGER},
          </if>
          <if test="record.controllerId != null">
            #{record.controllerId,jdbcType=INTEGER},
          </if>
          <if test="record.requestUrl != null">
            #{record.requestUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.methodName != null">
            #{record.methodName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodType != null">
            #{record.methodType,jdbcType=VARCHAR},
          </if>
          <if test="record.methodContentType != null">
            #{record.methodContentType,jdbcType=VARCHAR},
          </if>
          <if test="record.returnParamClass != null">
            #{record.returnParamClass,jdbcType=VARCHAR},
          </if>
          <if test="record.urlStatus != null">
            #{record.urlStatus,jdbcType=INTEGER},
          </if>
          <if test="record.urlLabel != null">
            #{record.urlLabel,jdbcType=VARCHAR},
          </if>
          <if test="record.methodDesc != null">
            #{record.methodDesc,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestParamMap != null">
            #{record.requestParamMap,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.returnParamMap != null">
            #{record.returnParamMap,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.guonl.entity.TApiUrlExample" resultType="java.lang.Long">
    select count(*) from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update api_url
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.urlId != null">
            url_id = #{record.urlId,jdbcType=INTEGER},
          </if>
          <if test="record.controllerId != null">
            controller_id = #{record.controllerId,jdbcType=INTEGER},
          </if>
          <if test="record.requestUrl != null">
            request_url = #{record.requestUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.methodName != null">
            method_name = #{record.methodName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodType != null">
            method_type = #{record.methodType,jdbcType=VARCHAR},
          </if>
          <if test="record.methodContentType != null">
            method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
          </if>
          <if test="record.returnParamClass != null">
            return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
          </if>
          <if test="record.urlStatus != null">
            url_status = #{record.urlStatus,jdbcType=INTEGER},
          </if>
          <if test="record.urlLabel != null">
            url_label = #{record.urlLabel,jdbcType=VARCHAR},
          </if>
          <if test="record.methodDesc != null">
            method_desc = #{record.methodDesc,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestParamMap != null">
            request_param_map = #{record.requestParamMap,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.returnParamMap != null">
            return_param_map = #{record.returnParamMap,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update api_url
    set url_id = #{record.urlId,jdbcType=INTEGER},
      controller_id = #{record.controllerId,jdbcType=INTEGER},
      request_url = #{record.requestUrl,jdbcType=VARCHAR},
      method_name = #{record.methodName,jdbcType=VARCHAR},
      method_type = #{record.methodType,jdbcType=VARCHAR},
      method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
      return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
      url_status = #{record.urlStatus,jdbcType=INTEGER},
      url_label = #{record.urlLabel,jdbcType=VARCHAR},
      method_desc = #{record.methodDesc,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=BIT},
      request_param_map = #{record.requestParamMap,jdbcType=LONGVARCHAR},
      return_param_map = #{record.returnParamMap,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update api_url
    set url_id = #{record.urlId,jdbcType=INTEGER},
      controller_id = #{record.controllerId,jdbcType=INTEGER},
      request_url = #{record.requestUrl,jdbcType=VARCHAR},
      method_name = #{record.methodName,jdbcType=VARCHAR},
      method_type = #{record.methodType,jdbcType=VARCHAR},
      method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
      return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
      url_status = #{record.urlStatus,jdbcType=INTEGER},
      url_label = #{record.urlLabel,jdbcType=VARCHAR},
      method_desc = #{record.methodDesc,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update api_url
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.controllerId != null">
            controller_id = #{record.controllerId,jdbcType=INTEGER},
          </if>
          <if test="record.requestUrl != null">
            request_url = #{record.requestUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.methodName != null">
            method_name = #{record.methodName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodType != null">
            method_type = #{record.methodType,jdbcType=VARCHAR},
          </if>
          <if test="record.methodContentType != null">
            method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
          </if>
          <if test="record.returnParamClass != null">
            return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
          </if>
          <if test="record.urlStatus != null">
            url_status = #{record.urlStatus,jdbcType=INTEGER},
          </if>
          <if test="record.urlLabel != null">
            url_label = #{record.urlLabel,jdbcType=VARCHAR},
          </if>
          <if test="record.methodDesc != null">
            method_desc = #{record.methodDesc,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestParamMap != null">
            request_param_map = #{record.requestParamMap,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.returnParamMap != null">
            return_param_map = #{record.returnParamMap,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where url_id = #{record.urlId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.guonl.entity.TApiUrlWithBLOBs">
    update api_url
    set controller_id = #{controllerId,jdbcType=INTEGER},
      request_url = #{requestUrl,jdbcType=VARCHAR},
      method_name = #{methodName,jdbcType=VARCHAR},
      method_type = #{methodType,jdbcType=VARCHAR},
      method_content_type = #{methodContentType,jdbcType=VARCHAR},
      return_param_class = #{returnParamClass,jdbcType=VARCHAR},
      url_status = #{urlStatus,jdbcType=INTEGER},
      url_label = #{urlLabel,jdbcType=VARCHAR},
      method_desc = #{methodDesc,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT},
      request_param_map = #{requestParamMap,jdbcType=LONGVARCHAR},
      return_param_map = #{returnParamMap,jdbcType=LONGVARCHAR}
    where url_id = #{urlId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guonl.entity.TApiUrl">
    update api_url
    set controller_id = #{controllerId,jdbcType=INTEGER},
      request_url = #{requestUrl,jdbcType=VARCHAR},
      method_name = #{methodName,jdbcType=VARCHAR},
      method_type = #{methodType,jdbcType=VARCHAR},
      method_content_type = #{methodContentType,jdbcType=VARCHAR},
      return_param_class = #{returnParamClass,jdbcType=VARCHAR},
      url_status = #{urlStatus,jdbcType=INTEGER},
      url_label = #{urlLabel,jdbcType=VARCHAR},
      method_desc = #{methodDesc,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT}
    where url_id = #{urlId,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.guonl.entity.TApiUrlExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.guonl.entity.TApiUrlExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into api_url
    (url_id, controller_id, request_url, method_name, method_type, method_content_type, 
      return_param_class, url_status, url_label, method_desc, create_time, update_time, 
      del_flag, request_param_map, return_param_map)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.urlId,jdbcType=INTEGER}, #{item.controllerId,jdbcType=INTEGER}, #{item.requestUrl,jdbcType=VARCHAR}, 
        #{item.methodName,jdbcType=VARCHAR}, #{item.methodType,jdbcType=VARCHAR}, #{item.methodContentType,jdbcType=VARCHAR}, 
        #{item.returnParamClass,jdbcType=VARCHAR}, #{item.urlStatus,jdbcType=INTEGER}, 
        #{item.urlLabel,jdbcType=VARCHAR}, #{item.methodDesc,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.delFlag,jdbcType=BIT}, #{item.requestParamMap,jdbcType=LONGVARCHAR}, 
        #{item.returnParamMap,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into api_url (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'url_id'.toString() == column.value">
          #{item.urlId,jdbcType=INTEGER}
        </if>
        <if test="'controller_id'.toString() == column.value">
          #{item.controllerId,jdbcType=INTEGER}
        </if>
        <if test="'request_url'.toString() == column.value">
          #{item.requestUrl,jdbcType=VARCHAR}
        </if>
        <if test="'method_name'.toString() == column.value">
          #{item.methodName,jdbcType=VARCHAR}
        </if>
        <if test="'method_type'.toString() == column.value">
          #{item.methodType,jdbcType=VARCHAR}
        </if>
        <if test="'method_content_type'.toString() == column.value">
          #{item.methodContentType,jdbcType=VARCHAR}
        </if>
        <if test="'return_param_class'.toString() == column.value">
          #{item.returnParamClass,jdbcType=VARCHAR}
        </if>
        <if test="'url_status'.toString() == column.value">
          #{item.urlStatus,jdbcType=INTEGER}
        </if>
        <if test="'url_label'.toString() == column.value">
          #{item.urlLabel,jdbcType=VARCHAR}
        </if>
        <if test="'method_desc'.toString() == column.value">
          #{item.methodDesc,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=BIT}
        </if>
        <if test="'request_param_map'.toString() == column.value">
          #{item.requestParamMap,jdbcType=LONGVARCHAR}
        </if>
        <if test="'return_param_map'.toString() == column.value">
          #{item.returnParamMap,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <resultMap id="BaseResultMap" type="com.guonl.entity.TApiUrl">
    <id column="url_id" jdbcType="INTEGER" property="urlId" />
    <result column="controller_id" jdbcType="INTEGER" property="controllerId" />
    <result column="request_url" jdbcType="VARCHAR" property="requestUrl" />
    <result column="method_name" jdbcType="VARCHAR" property="methodName" />
    <result column="method_type" jdbcType="VARCHAR" property="methodType" />
    <result column="method_content_type" jdbcType="VARCHAR" property="methodContentType" />
    <result column="return_param_class" jdbcType="VARCHAR" property="returnParamClass" />
    <result column="url_status" jdbcType="INTEGER" property="urlStatus" />
    <result column="url_label" jdbcType="VARCHAR" property="urlLabel" />
    <result column="method_desc" jdbcType="VARCHAR" property="methodDesc" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.guonl.entity.TApiUrlWithBLOBs">
    <result column="request_param_map" jdbcType="LONGVARCHAR" property="requestParamMap" />
    <result column="return_param_map" jdbcType="LONGVARCHAR" property="returnParamMap" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    url_id, controller_id, request_url, method_name, method_type, method_content_type, 
    return_param_class, url_status, url_label, method_desc, create_time, update_time, 
    del_flag
  </sql>
  <sql id="Blob_Column_List">
    request_param_map, return_param_map
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.guonl.entity.TApiUrlExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.guonl.entity.TApiUrlExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url
    where url_id = #{urlId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from api_url
    where url_id = #{urlId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guonl.entity.TApiUrlExample">
    delete from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guonl.entity.TApiUrlWithBLOBs">
    insert into api_url (url_id, controller_id, request_url, 
      method_name, method_type, method_content_type, 
      return_param_class, url_status, url_label, 
      method_desc, create_time, update_time, 
      del_flag, request_param_map, return_param_map
      )
    values (#{urlId,jdbcType=INTEGER}, #{controllerId,jdbcType=INTEGER}, #{requestUrl,jdbcType=VARCHAR}, 
      #{methodName,jdbcType=VARCHAR}, #{methodType,jdbcType=VARCHAR}, #{methodContentType,jdbcType=VARCHAR}, 
      #{returnParamClass,jdbcType=VARCHAR}, #{urlStatus,jdbcType=INTEGER}, #{urlLabel,jdbcType=VARCHAR}, 
      #{methodDesc,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{delFlag,jdbcType=BIT}, #{requestParamMap,jdbcType=LONGVARCHAR}, #{returnParamMap,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into api_url
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.urlId != null">
            url_id,
          </if>
          <if test="record.controllerId != null">
            controller_id,
          </if>
          <if test="record.requestUrl != null">
            request_url,
          </if>
          <if test="record.methodName != null">
            method_name,
          </if>
          <if test="record.methodType != null">
            method_type,
          </if>
          <if test="record.methodContentType != null">
            method_content_type,
          </if>
          <if test="record.returnParamClass != null">
            return_param_class,
          </if>
          <if test="record.urlStatus != null">
            url_status,
          </if>
          <if test="record.urlLabel != null">
            url_label,
          </if>
          <if test="record.methodDesc != null">
            method_desc,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.requestParamMap != null">
            request_param_map,
          </if>
          <if test="record.returnParamMap != null">
            return_param_map,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.urlId != null">
            #{record.urlId,jdbcType=INTEGER},
          </if>
          <if test="record.controllerId != null">
            #{record.controllerId,jdbcType=INTEGER},
          </if>
          <if test="record.requestUrl != null">
            #{record.requestUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.methodName != null">
            #{record.methodName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodType != null">
            #{record.methodType,jdbcType=VARCHAR},
          </if>
          <if test="record.methodContentType != null">
            #{record.methodContentType,jdbcType=VARCHAR},
          </if>
          <if test="record.returnParamClass != null">
            #{record.returnParamClass,jdbcType=VARCHAR},
          </if>
          <if test="record.urlStatus != null">
            #{record.urlStatus,jdbcType=INTEGER},
          </if>
          <if test="record.urlLabel != null">
            #{record.urlLabel,jdbcType=VARCHAR},
          </if>
          <if test="record.methodDesc != null">
            #{record.methodDesc,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestParamMap != null">
            #{record.requestParamMap,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.returnParamMap != null">
            #{record.returnParamMap,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.guonl.entity.TApiUrlExample" resultType="java.lang.Long">
    select count(*) from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update api_url
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.urlId != null">
            url_id = #{record.urlId,jdbcType=INTEGER},
          </if>
          <if test="record.controllerId != null">
            controller_id = #{record.controllerId,jdbcType=INTEGER},
          </if>
          <if test="record.requestUrl != null">
            request_url = #{record.requestUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.methodName != null">
            method_name = #{record.methodName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodType != null">
            method_type = #{record.methodType,jdbcType=VARCHAR},
          </if>
          <if test="record.methodContentType != null">
            method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
          </if>
          <if test="record.returnParamClass != null">
            return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
          </if>
          <if test="record.urlStatus != null">
            url_status = #{record.urlStatus,jdbcType=INTEGER},
          </if>
          <if test="record.urlLabel != null">
            url_label = #{record.urlLabel,jdbcType=VARCHAR},
          </if>
          <if test="record.methodDesc != null">
            method_desc = #{record.methodDesc,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestParamMap != null">
            request_param_map = #{record.requestParamMap,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.returnParamMap != null">
            return_param_map = #{record.returnParamMap,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update api_url
    set url_id = #{record.urlId,jdbcType=INTEGER},
      controller_id = #{record.controllerId,jdbcType=INTEGER},
      request_url = #{record.requestUrl,jdbcType=VARCHAR},
      method_name = #{record.methodName,jdbcType=VARCHAR},
      method_type = #{record.methodType,jdbcType=VARCHAR},
      method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
      return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
      url_status = #{record.urlStatus,jdbcType=INTEGER},
      url_label = #{record.urlLabel,jdbcType=VARCHAR},
      method_desc = #{record.methodDesc,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=BIT},
      request_param_map = #{record.requestParamMap,jdbcType=LONGVARCHAR},
      return_param_map = #{record.returnParamMap,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update api_url
    set url_id = #{record.urlId,jdbcType=INTEGER},
      controller_id = #{record.controllerId,jdbcType=INTEGER},
      request_url = #{record.requestUrl,jdbcType=VARCHAR},
      method_name = #{record.methodName,jdbcType=VARCHAR},
      method_type = #{record.methodType,jdbcType=VARCHAR},
      method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
      return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
      url_status = #{record.urlStatus,jdbcType=INTEGER},
      url_label = #{record.urlLabel,jdbcType=VARCHAR},
      method_desc = #{record.methodDesc,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update api_url
    SET
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.controllerId != null">
            controller_id = #{record.controllerId,jdbcType=INTEGER},
          </if>
          <if test="record.requestUrl != null">
            request_url = #{record.requestUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.methodName != null">
            method_name = #{record.methodName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodType != null">
            method_type = #{record.methodType,jdbcType=VARCHAR},
          </if>
          <if test="record.methodContentType != null">
            method_content_type = #{record.methodContentType,jdbcType=VARCHAR},
          </if>
          <if test="record.returnParamClass != null">
            return_param_class = #{record.returnParamClass,jdbcType=VARCHAR},
          </if>
          <if test="record.urlStatus != null">
            url_status = #{record.urlStatus,jdbcType=INTEGER},
          </if>
          <if test="record.urlLabel != null">
            url_label = #{record.urlLabel,jdbcType=VARCHAR},
          </if>
          <if test="record.methodDesc != null">
            method_desc = #{record.methodDesc,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestParamMap != null">
            request_param_map = #{record.requestParamMap,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.returnParamMap != null">
            return_param_map = #{record.returnParamMap,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where url_id = #{record.urlId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.guonl.entity.TApiUrlWithBLOBs">
    update api_url
    set controller_id = #{controllerId,jdbcType=INTEGER},
      request_url = #{requestUrl,jdbcType=VARCHAR},
      method_name = #{methodName,jdbcType=VARCHAR},
      method_type = #{methodType,jdbcType=VARCHAR},
      method_content_type = #{methodContentType,jdbcType=VARCHAR},
      return_param_class = #{returnParamClass,jdbcType=VARCHAR},
      url_status = #{urlStatus,jdbcType=INTEGER},
      url_label = #{urlLabel,jdbcType=VARCHAR},
      method_desc = #{methodDesc,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT},
      request_param_map = #{requestParamMap,jdbcType=LONGVARCHAR},
      return_param_map = #{returnParamMap,jdbcType=LONGVARCHAR}
    where url_id = #{urlId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guonl.entity.TApiUrl">
    update api_url
    set controller_id = #{controllerId,jdbcType=INTEGER},
      request_url = #{requestUrl,jdbcType=VARCHAR},
      method_name = #{methodName,jdbcType=VARCHAR},
      method_type = #{methodType,jdbcType=VARCHAR},
      method_content_type = #{methodContentType,jdbcType=VARCHAR},
      return_param_class = #{returnParamClass,jdbcType=VARCHAR},
      url_status = #{urlStatus,jdbcType=INTEGER},
      url_label = #{urlLabel,jdbcType=VARCHAR},
      method_desc = #{methodDesc,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT}
    where url_id = #{urlId,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.guonl.entity.TApiUrlExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.guonl.entity.TApiUrlExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into api_url
    (url_id, controller_id, request_url, method_name, method_type, method_content_type, 
      return_param_class, url_status, url_label, method_desc, create_time, update_time, 
      del_flag, request_param_map, return_param_map)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.urlId,jdbcType=INTEGER}, #{item.controllerId,jdbcType=INTEGER}, #{item.requestUrl,jdbcType=VARCHAR}, 
        #{item.methodName,jdbcType=VARCHAR}, #{item.methodType,jdbcType=VARCHAR}, #{item.methodContentType,jdbcType=VARCHAR}, 
        #{item.returnParamClass,jdbcType=VARCHAR}, #{item.urlStatus,jdbcType=INTEGER}, 
        #{item.urlLabel,jdbcType=VARCHAR}, #{item.methodDesc,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.delFlag,jdbcType=BIT}, #{item.requestParamMap,jdbcType=LONGVARCHAR}, 
        #{item.returnParamMap,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into api_url (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'url_id'.toString() == column.value">
          #{item.urlId,jdbcType=INTEGER}
        </if>
        <if test="'controller_id'.toString() == column.value">
          #{item.controllerId,jdbcType=INTEGER}
        </if>
        <if test="'request_url'.toString() == column.value">
          #{item.requestUrl,jdbcType=VARCHAR}
        </if>
        <if test="'method_name'.toString() == column.value">
          #{item.methodName,jdbcType=VARCHAR}
        </if>
        <if test="'method_type'.toString() == column.value">
          #{item.methodType,jdbcType=VARCHAR}
        </if>
        <if test="'method_content_type'.toString() == column.value">
          #{item.methodContentType,jdbcType=VARCHAR}
        </if>
        <if test="'return_param_class'.toString() == column.value">
          #{item.returnParamClass,jdbcType=VARCHAR}
        </if>
        <if test="'url_status'.toString() == column.value">
          #{item.urlStatus,jdbcType=INTEGER}
        </if>
        <if test="'url_label'.toString() == column.value">
          #{item.urlLabel,jdbcType=VARCHAR}
        </if>
        <if test="'method_desc'.toString() == column.value">
          #{item.methodDesc,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=BIT}
        </if>
        <if test="'request_param_map'.toString() == column.value">
          #{item.requestParamMap,jdbcType=LONGVARCHAR}
        </if>
        <if test="'return_param_map'.toString() == column.value">
          #{item.returnParamMap,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>