<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guonl.dao.TApiUrlDocMapper">
  <resultMap id="BaseResultMap" type="com.guonl.entity.TApiUrlDoc">
    <id column="url_id" jdbcType="INTEGER" property="urlId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.guonl.entity.TApiUrlDocWithBLOBs">
    <result column="request_headers" jdbcType="LONGVARCHAR" property="requestHeaders" />
    <result column="query_params" jdbcType="LONGVARCHAR" property="queryParams" />
    <result column="success_resp_example" jdbcType="LONGVARCHAR" property="successRespExample" />
    <result column="fail_resp_example" jdbcType="LONGVARCHAR" property="failRespExample" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    url_id, create_time, update_time, del_flag
  </sql>
  <sql id="Blob_Column_List">
    request_headers, query_params, success_resp_example, fail_resp_example
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.guonl.entity.TApiUrlDocExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url_doc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.guonl.entity.TApiUrlDocExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_url_doc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url_doc
    where url_id = #{urlId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from api_url_doc
    where url_id = #{urlId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guonl.entity.TApiUrlDocExample">
    delete from api_url_doc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guonl.entity.TApiUrlDocWithBLOBs">
    insert into api_url_doc (url_id, create_time, update_time, 
      del_flag, request_headers, query_params, 
      success_resp_example, fail_resp_example
      )
    values (#{urlId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{delFlag,jdbcType=BIT}, #{requestHeaders,jdbcType=LONGVARCHAR}, #{queryParams,jdbcType=LONGVARCHAR}, 
      #{successRespExample,jdbcType=LONGVARCHAR}, #{failRespExample,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into api_url_doc
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.urlId != null">
            url_id,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.requestHeaders != null">
            request_headers,
          </if>
          <if test="record.queryParams != null">
            query_params,
          </if>
          <if test="record.successRespExample != null">
            success_resp_example,
          </if>
          <if test="record.failRespExample != null">
            fail_resp_example,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.urlId != null">
            #{record.urlId,jdbcType=INTEGER},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestHeaders != null">
            #{record.requestHeaders,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.queryParams != null">
            #{record.queryParams,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.successRespExample != null">
            #{record.successRespExample,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.failRespExample != null">
            #{record.failRespExample,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.guonl.entity.TApiUrlDocExample" resultType="java.lang.Long">
    select count(*) from api_url_doc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update api_url_doc
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.urlId != null">
            url_id = #{record.urlId,jdbcType=INTEGER},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestHeaders != null">
            request_headers = #{record.requestHeaders,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.queryParams != null">
            query_params = #{record.queryParams,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.successRespExample != null">
            success_resp_example = #{record.successRespExample,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.failRespExample != null">
            fail_resp_example = #{record.failRespExample,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update api_url_doc
    set url_id = #{record.urlId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=BIT},
      request_headers = #{record.requestHeaders,jdbcType=LONGVARCHAR},
      query_params = #{record.queryParams,jdbcType=LONGVARCHAR},
      success_resp_example = #{record.successRespExample,jdbcType=LONGVARCHAR},
      fail_resp_example = #{record.failRespExample,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update api_url_doc
    set url_id = #{record.urlId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      del_flag = #{record.delFlag,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update api_url_doc
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=BIT},
          </if>
          <if test="record.requestHeaders != null">
            request_headers = #{record.requestHeaders,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.queryParams != null">
            query_params = #{record.queryParams,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.successRespExample != null">
            success_resp_example = #{record.successRespExample,jdbcType=LONGVARCHAR},
          </if>
          <if test="record.failRespExample != null">
            fail_resp_example = #{record.failRespExample,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where url_id = #{record.urlId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.guonl.entity.TApiUrlDocWithBLOBs">
    update api_url_doc
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT},
      request_headers = #{requestHeaders,jdbcType=LONGVARCHAR},
      query_params = #{queryParams,jdbcType=LONGVARCHAR},
      success_resp_example = #{successRespExample,jdbcType=LONGVARCHAR},
      fail_resp_example = #{failRespExample,jdbcType=LONGVARCHAR}
    where url_id = #{urlId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guonl.entity.TApiUrlDoc">
    update api_url_doc
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=BIT}
    where url_id = #{urlId,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.guonl.entity.TApiUrlDocExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from api_url_doc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.guonl.entity.TApiUrlDocExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_url_doc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into api_url_doc
    (url_id, create_time, update_time, del_flag, request_headers, query_params, success_resp_example, 
      fail_resp_example)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.urlId,jdbcType=INTEGER}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.delFlag,jdbcType=BIT}, #{item.requestHeaders,jdbcType=LONGVARCHAR}, #{item.queryParams,jdbcType=LONGVARCHAR}, 
        #{item.successRespExample,jdbcType=LONGVARCHAR}, #{item.failRespExample,jdbcType=LONGVARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into api_url_doc (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'url_id'.toString() == column.value">
          #{item.urlId,jdbcType=INTEGER}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=BIT}
        </if>
        <if test="'request_headers'.toString() == column.value">
          #{item.requestHeaders,jdbcType=LONGVARCHAR}
        </if>
        <if test="'query_params'.toString() == column.value">
          #{item.queryParams,jdbcType=LONGVARCHAR}
        </if>
        <if test="'success_resp_example'.toString() == column.value">
          #{item.successRespExample,jdbcType=LONGVARCHAR}
        </if>
        <if test="'fail_resp_example'.toString() == column.value">
          #{item.failRespExample,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>